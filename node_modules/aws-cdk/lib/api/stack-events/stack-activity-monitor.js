"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StackActivityMonitor = void 0;
const util = require("util");
const cloud_assembly_schema_1 = require("@aws-cdk/cloud-assembly-schema");
const uuid = require("uuid");
const stack_event_poller_1 = require("./stack-event-poller");
const messages_1 = require("../../cli/messages");
const util_1 = require("../../util");
const stack_progress_monitor_1 = require("./stack-progress-monitor");
class StackActivityMonitor {
    constructor({ cfn, ioHelper, stack, stackName, resourcesTotal, changeSetCreationTime, pollingInterval = 2000, }) {
        var _a;
        this.errors = [];
        this.ioHelper = ioHelper;
        this.stack = stack;
        this.stackName = stackName;
        this.progressMonitor = new stack_progress_monitor_1.StackProgressMonitor(resourcesTotal);
        this.pollingInterval = pollingInterval;
        this.poller = new stack_event_poller_1.StackEventPoller(cfn, {
            stackName,
            startTime: (_a = changeSetCreationTime === null || changeSetCreationTime === void 0 ? void 0 : changeSetCreationTime.getTime()) !== null && _a !== void 0 ? _a : Date.now(),
        });
    }
    async start() {
        this.monitorId = uuid.v4();
        await this.ioHelper.notify((0, messages_1.debug)(`Deploying ${this.stackName}`, 'CDK_TOOLKIT_I5501', {
            deployment: this.monitorId,
            stack: this.stack,
            stackName: this.stackName,
            resourcesTotal: this.progressMonitor.total,
        }));
        this.scheduleNextTick();
        return this;
    }
    async stop() {
        const oldMonitorId = this.monitorId;
        this.monitorId = undefined;
        if (this.tickTimer) {
            clearTimeout(this.tickTimer);
        }
        // Do a final poll for all events. This is to handle the situation where DescribeStackStatus
        // already returned an error, but the monitor hasn't seen all the events yet and we'd end
        // up not printing the failure reason to users.
        await this.finalPollToEnd(oldMonitorId);
        await this.ioHelper.notify((0, messages_1.debug)(`Completed ${this.stackName}`, 'CDK_TOOLKIT_I5503', {
            deployment: oldMonitorId,
            stack: this.stack,
            stackName: this.stackName,
            resourcesTotal: this.progressMonitor.total,
        }));
    }
    scheduleNextTick() {
        if (!this.monitorId) {
            return;
        }
        this.tickTimer = setTimeout(() => void this.tick(), this.pollingInterval);
    }
    async tick() {
        if (!this.monitorId) {
            return;
        }
        try {
            this.readPromise = this.readNewEvents(this.monitorId);
            await this.readPromise;
            this.readPromise = undefined;
            // We might have been stop()ped while the network call was in progress.
            if (!this.monitorId) {
                return;
            }
        }
        catch (e) {
            await this.ioHelper.notify((0, messages_1.error)(util.format('Error occurred while monitoring stack: %s', e), 'CDK_TOOLKIT_E5500', { error: e }));
        }
        this.scheduleNextTick();
    }
    findMetadataFor(logicalId) {
        var _a;
        const metadata = (_a = this.stack.manifest) === null || _a === void 0 ? void 0 : _a.metadata;
        if (!logicalId || !metadata) {
            return undefined;
        }
        for (const path of Object.keys(metadata)) {
            const entry = metadata[path]
                .filter((e) => e.type === cloud_assembly_schema_1.ArtifactMetadataEntryType.LOGICAL_ID)
                .find((e) => e.data === logicalId);
            if (entry) {
                return {
                    entry,
                    constructPath: this.simplifyConstructPath(path),
                };
            }
        }
        return undefined;
    }
    /**
     * Reads all new events from the stack history
     *
     * The events are returned in reverse chronological order; we continue to the next page if we
     * see a next page and the last event in the page is new to us (and within the time window).
     * haven't seen the final event
     */
    async readNewEvents(monitorId) {
        const pollEvents = await this.poller.poll();
        for (const resourceEvent of pollEvents) {
            this.progressMonitor.process(resourceEvent.event);
            const activity = {
                deployment: monitorId,
                event: resourceEvent.event,
                metadata: this.findMetadataFor(resourceEvent.event.LogicalResourceId),
                progress: this.progressMonitor.progress,
            };
            this.checkForErrors(activity);
            await this.ioHelper.notify((0, messages_1.info)(this.formatActivity(activity, true), 'CDK_TOOLKIT_I5502', activity));
        }
    }
    /**
     * Perform a final poll to the end and flush out all events to the printer
     *
     * Finish any poll currently in progress, then do a final one until we've
     * reached the last page.
     */
    async finalPollToEnd(monitorId) {
        // If we were doing a poll, finish that first. It was started before
        // the moment we were sure we weren't going to get any new events anymore
        // so we need to do a new one anyway. Need to wait for this one though
        // because our state is single-threaded.
        if (this.readPromise) {
            await this.readPromise;
        }
        await this.readNewEvents(monitorId);
    }
    /**
     * Formats a stack activity into a basic string
     */
    formatActivity(activity, progress) {
        const event = activity.event;
        const metadata = activity.metadata;
        const resourceName = metadata ? metadata.constructPath : event.LogicalResourceId || '';
        const logicalId = resourceName !== event.LogicalResourceId ? `(${event.LogicalResourceId}) ` : '';
        return util.format('%s | %s%s | %s | %s | %s %s%s%s', event.StackName, progress !== false ? `${activity.progress.formatted} | ` : '', new Date(event.Timestamp).toLocaleTimeString(), event.ResourceStatus || '', event.ResourceType, resourceName, logicalId, event.ResourceStatusReason ? event.ResourceStatusReason : '', (metadata === null || metadata === void 0 ? void 0 : metadata.entry.trace) ? `\n\t${metadata.entry.trace.join('\n\t\\_ ')}` : '');
    }
    checkForErrors(activity) {
        var _a, _b, _c;
        if ((0, util_1.stackEventHasErrorMessage)((_a = activity.event.ResourceStatus) !== null && _a !== void 0 ? _a : '')) {
            const isCancelled = ((_b = activity.event.ResourceStatusReason) !== null && _b !== void 0 ? _b : '').indexOf('cancelled') > -1;
            // Cancelled is not an interesting failure reason, nor is the stack message (stack
            // message will just say something like "stack failed to update")
            if (!isCancelled && activity.event.StackName !== activity.event.LogicalResourceId) {
                this.errors.push((_c = activity.event.ResourceStatusReason) !== null && _c !== void 0 ? _c : '');
            }
        }
    }
    simplifyConstructPath(path) {
        path = path.replace(/\/Resource$/, '');
        path = path.replace(/^\//, ''); // remove "/" prefix
        // remove "<stack-name>/" prefix
        if (path.startsWith(this.stackName + '/')) {
            path = path.slice(this.stackName.length + 1);
        }
        return path;
    }
}
exports.StackActivityMonitor = StackActivityMonitor;
//# sourceMappingURL=data:application/json;base64,